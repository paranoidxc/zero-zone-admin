// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tdFirmFieldNames          = builder.RawFieldNames(&TdFirm{})
	tdFirmRows                = strings.Join(tdFirmFieldNames, ",")
	tdFirmRowsExpectAutoSet   = strings.Join(stringx.Remove(tdFirmFieldNames, "`firm_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tdFirmRowsWithPlaceHolder = strings.Join(stringx.Remove(tdFirmFieldNames, "`firm_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheZeroZoneTdFirmFirmIdPrefix = "cache:zeroZone:tdFirm:firmId:"
)

type (
	tdFirmModel interface {
		Insert(ctx context.Context, data *TdFirm) (sql.Result, error)
		FindOne(ctx context.Context, firmId int64) (*TdFirm, error)
		Update(ctx context.Context, data *TdFirm) error
		Delete(ctx context.Context, firmId int64) error
		Deletes(ctx context.Context, firmIds []int64) error
		FindAllByWhere(ctx context.Context, where string) ([]*TdFirm, error)
		FindAllByWhereCount(ctx context.Context, where string) (int64, error)
		FindPageByWhere(ctx context.Context, where string, page int64, limit int64) ([]*TdFirm, error)
		FindPageByWhereCount(ctx context.Context, where string) (int64, error)
	}

	defaultTdFirmModel struct {
		sqlc.CachedConn
		table string
	}

	TdFirm struct {
		FirmId    int64          `db:"firm_id"`
		FirmName  sql.NullString `db:"firm_name"`
		FirmAlias sql.NullString `db:"firm_alias"`
		FirmCode  sql.NullString `db:"firm_code"`
		FirmDesc  sql.NullString `db:"firm_desc"`
	}
)

func newTdFirmModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTdFirmModel {
	return &defaultTdFirmModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`td_firm`",
	}
}

func (m *defaultTdFirmModel) Delete(ctx context.Context, firmId int64) error {
	zeroZoneTdFirmFirmIdKey := fmt.Sprintf("%s%v", cacheZeroZoneTdFirmFirmIdPrefix, firmId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `firm_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, firmId)
	}, zeroZoneTdFirmFirmIdKey)
	return err
}

func (m *defaultTdFirmModel) Deletes(ctx context.Context, firmIds []int64) error {
	for _, firmId := range firmIds {
		zeroZoneTdFirmFirmIdKey := fmt.Sprintf("%s%v", cacheZeroZoneTdFirmFirmIdPrefix, firmId)
		_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
			query := fmt.Sprintf("delete from %s where `firm_id` = ?", m.table)
			return conn.ExecCtx(ctx, query, firmId)
		}, zeroZoneTdFirmFirmIdKey)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *defaultTdFirmModel) FindOne(ctx context.Context, firmId int64) (*TdFirm, error) {
	zeroZoneTdFirmFirmIdKey := fmt.Sprintf("%s%v", cacheZeroZoneTdFirmFirmIdPrefix, firmId)
	var resp TdFirm
	err := m.QueryRowCtx(ctx, &resp, zeroZoneTdFirmFirmIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `firm_id` = ? limit 1", tdFirmRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, firmId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTdFirmModel) FindAllByWhere(ctx context.Context, where string) ([]*TdFirm, error) {
	query := fmt.Sprintf("SELECT %s FROM %s ORDER BY `firm_id` DESC", tdFirmRows, m.table)
	var resp []*TdFirm
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultTdFirmModel) FindAllByWhereCount(ctx context.Context, where string) (int64, error) {
	query := fmt.Sprintf("SELECT COUNT(`firm_id`) FROM %s WHERE %s", m.table, where)
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultTdFirmModel) FindPageByWhere(ctx context.Context, where string, page int64, limit int64) ([]*TdFirm, error) {
	offset := (page - 1) * limit
	query := fmt.Sprintf("SELECT %s FROM %s ORDER BY `firm_id` DESC LIMIT %d,%d", tdFirmRows, m.table, offset, limit)
	var resp []*TdFirm
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultTdFirmModel) FindPageByWhereCount(ctx context.Context, where string) (int64, error) {
	query := fmt.Sprintf("SELECT COUNT(`firm_id`) FROM %s WHERE %s", m.table, where)
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultTdFirmModel) Insert(ctx context.Context, data *TdFirm) (sql.Result, error) {
	zeroZoneTdFirmFirmIdKey := fmt.Sprintf("%s%v", cacheZeroZoneTdFirmFirmIdPrefix, data.FirmId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tdFirmRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FirmName, data.FirmAlias, data.FirmCode, data.FirmDesc)
	}, zeroZoneTdFirmFirmIdKey)
	return ret, err
}

func (m *defaultTdFirmModel) Update(ctx context.Context, data *TdFirm) error {
	zeroZoneTdFirmFirmIdKey := fmt.Sprintf("%s%v", cacheZeroZoneTdFirmFirmIdPrefix, data.FirmId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `firm_id` = ?", m.table, tdFirmRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FirmName, data.FirmAlias, data.FirmCode, data.FirmDesc, data.FirmId)
	}, zeroZoneTdFirmFirmIdKey)
	return err
}

func (m *defaultTdFirmModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheZeroZoneTdFirmFirmIdPrefix, primary)
}

func (m *defaultTdFirmModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `firm_id` = ? limit 1", tdFirmRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTdFirmModel) tableName() string {
	return m.table
}
